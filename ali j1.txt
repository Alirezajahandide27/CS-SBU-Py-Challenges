{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unindent does not match any outer indentation level (<tokenize>, line 206)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<tokenize>\"\u001b[1;36m, line \u001b[1;32m206\u001b[0m\n\u001b[1;33m    def RMSE():\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unindent does not match any outer indentation level\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn import datasets, linear_model\n",
    "from sklearn.metrics import mean_squared_error, r2_score\n",
    "from sklearn.datasets import load_boston\n",
    "\n",
    "\n",
    "from sklearn import datasets\n",
    "boston = datasets.load_boston()\n",
    "features = boston.data\n",
    "target = boston.target\n",
    "columns = boston.feature_names\n",
    "print(columns)\n",
    "\n",
    "class LinearRegression(): # look up what goes in the () eg 'self' etc\n",
    "\n",
    "\n",
    "    def distance_line_to_point():\n",
    "        x = [1,2,3,4,5] # target\n",
    "        y = [.2,.4,.6,.8,1]\n",
    "        #plt.plot(x,y)\n",
    "        #plt.show()\n",
    "        # mean of x and y\n",
    "        mean_x = np.mean(x)\n",
    "        mean_y = np.mean(y)\n",
    "        # total no. of values\n",
    "        m = len(x)\n",
    "        # calculate B1 and B0\n",
    "        numer = 0\n",
    "        denom = 0\n",
    "        for i in range(m):\n",
    "            numer += (x[i] - mean_x) * (y[i] - mean_y)\n",
    "            denom += (x[i] - mean_x ) ** 2\n",
    "        b1 = numer / denom\n",
    "        b0 = mean_y - (b1 * mean_x)\n",
    "        # print coefficients of y= (b1 * x) + b0\n",
    "        return b0, b1\n",
    "\n",
    "    def plot():\n",
    "\n",
    "        max_x = np.max(x) + 100\n",
    "        min_x = np.min(x) - 100\n",
    "\n",
    "        # Calculating line values x and y\n",
    "        x = np.linspace(min_x, max_x, 1000)\n",
    "        y = b0 + b1 * x\n",
    "\n",
    "        # Ploting Line\n",
    "        plt.plot(x, y, color='#58b970', label='Regression Line')\n",
    "        # Ploting Scatter Points\n",
    "        plt.scatter(x, y, c='#ef5423', label='Scatter Plot')\n",
    "        #plt.xlabel()\n",
    "        #plt.ylabel()\n",
    "        #plt.legend()\n",
    "        plt.show()\n",
    "\n",
    "   \n",
    "    def RMSE():\n",
    "        rmse = 0\n",
    "        for i in range(m):\n",
    "            y_pred = b0 + b1 * x[i]\n",
    "            rmse += (y[i] - y_pred) ** 2\n",
    "        rmse = np.sqrt(rmse/m)\n",
    "        return rmse\n",
    "\n",
    "    def evaluate_algorithm(dataset, algorithm):\n",
    "        test_set = list()\n",
    "        for row in dataset:\n",
    "            row_copy = list(row)\n",
    "            row_copy[-1] = None\n",
    "            test_set.append(row_copy)\n",
    "        predicted = algorithm(dataset, test_set)\n",
    "        print(predicted)\n",
    "        actual = [row[-1] for row in dataset]\n",
    "        rmse = rmse_metric(actual, predicted)\n",
    "        return rmse\n",
    "\n",
    "    def R_squared():\n",
    "        ss_t = 0\n",
    "        ss_r = 0\n",
    "        for i in range(m):\n",
    "            y_pred = b0 + b1 * x[i]\n",
    "            ss_t += (y[i] - mean_y) ** 2\n",
    "            ss_r += (y[i] - y_pred) ** 2\n",
    "        r2 = 1 - (ss_r/ss_t)\n",
    "        print(r2)\n",
    "\n",
    "\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "def improvements():\n",
    "    # Cannot use Rank 1 matrix in scikit learn\n",
    "    X = x.reshape((m, 1))\n",
    "    # Creating Model\n",
    "    reg = LinearRegression()\n",
    "    # Fitting training data\n",
    "    reg = reg.fit(x, y)\n",
    "    # Y Prediction\n",
    "    Y_pred = reg.predict(x)\n",
    "    # Calculating RMSE and R2 Score\n",
    "    mse = mean_squared_error(y, Y_pred)\n",
    "    rmse = np.sqrt(mse)\n",
    "    r2_score = reg.score(x,y)\n",
    "\n",
    "    print(np.sqrt(mse))\n",
    "    print(r2_score)\n",
    "\n",
    "class got_this_online_just_to_check():\n",
    "    def mean(values):\n",
    "        return sum(values) / float(len(values))\n",
    "\n",
    "    # Calculate covariance between x and y\n",
    "    def covariance(x, mean_x, y, mean_y):\n",
    "        covar = 0.0\n",
    "        for i in range(len(x)):\n",
    "            covar += (x[i] - mean_x) * (y[i] - mean_y)\n",
    "        return covar\n",
    "\n",
    "    # Calculate the variance of a list of numbers\n",
    "    def variance(values, mean):\n",
    "        return sum([(x-mean)**2 for x in values])\n",
    "\n",
    "    # Calculate coefficients\n",
    "    def coefficients(dataset):\n",
    "        x = [row[0] for row in dataset]\n",
    "        y = [row[1] for row in dataset]\n",
    "        x_mean, y_mean = mean(x), mean(y)\n",
    "        b1 = covariance(x, x_mean, y, y_mean) / variance(x, x_mean)\n",
    "        b0 = y_mean - b1 * x_mean\n",
    "        return [b0, b1]\n",
    "\n",
    "    # Simple linear regression algorithm\n",
    "    def simple_linear_regression(train, test):\n",
    "        predictions = list()\n",
    "        b0, b1 = coefficients(train)\n",
    "        for row in test:\n",
    "            yhat = b0 + b1 * row[0]\n",
    "            predictions.append(yhat)\n",
    "        return predictions\n",
    "\n",
    "    # Test simple linear regression\n",
    "    dataset = [[1, 1], [2, 3], [4, 3], [3, 2], [5, 5]]\n",
    "    rmse = evaluate_algorithm(dataset, simple_linear_regression)\n",
    "    print('RMSE: %.3f' % (rmse))\n",
    "\n",
    "from sklearn import datasets\n",
    "boston = datasets.load_boston()\n",
    "features = boston.data\n",
    "target = boston.target\n",
    "columns = boston.feature_names\n",
    "print(columns)\n",
    "\n",
    "class multivariate_linear_regression():\n",
    "\n",
    "    def distance_line_to_points(self):\n",
    "        #x = [1,2,3,4,5] # target\n",
    "        #y = [.2,.4,.6,.8,1]\n",
    "\n",
    "        '''\n",
    "        change this to Boston housing dataset\n",
    "        '''\n",
    "\n",
    "        m = len(x) # total number of values\n",
    "\n",
    "        # create vector for the slope B\n",
    "        theta = np.array()\n",
    "        b0 = np.array()\n",
    "        for i in range(columns):\n",
    "            for i in range(m):\n",
    "                numer += (x[i] - mean_x) * (y[i] - mean_y)\n",
    "                denom += (x[i] - mean_x ) ** 2\n",
    "            theta += numer / denom\n",
    "            b0 += mean_y - (b1 * mean_x)\n",
    "            return theta, b0\n",
    "\n",
    "        # create vector for the columns X\n",
    "        mean_X = np.array()\n",
    "        for i in range(columns):\n",
    "            mean_X += (np.mean(columns[i]))\n",
    "            return mean_X\n",
    "\n",
    "        # dot product\n",
    "        transpose = np.dot(mean_X, theta)\n",
    "        print(transpose)\n",
    "\n",
    "     def RMSE():\n",
    "        rmse = 0\n",
    "        for i in range(m):\n",
    "            y_pred = b0 + theta * mean_X[i]\n",
    "            rmse += (y[i] - y_pred) ** 2\n",
    "        rmse = np.sqrt(rmse/m)\n",
    "        return rmse\n",
    "\n",
    "    def R_squared(self):\n",
    "        ss_t = 0\n",
    "        ss_r = 0\n",
    "        for i in range(m):\n",
    "            y_pred = b0 + theta * mean_X[i]\n",
    "            ss_t += (y[i] - mean_y) ** 2\n",
    "            ss_r += (y[i] - y_pred) ** 2\n",
    "        r2 = 1 - (ss_r/ss_t)\n",
    "        print(r2)\n",
    "\n",
    "\n",
    "#########################################\n",
    "\n",
    "# Option 1: Split data into training/testing sets:\n",
    "import\n",
    "\n",
    "\n",
    "Split the feature data into training/testing sets\n",
    "features_train = features[:-20]\n",
    "features_test = features[-20:]\n",
    "\n",
    "Split the targets into training/testing sets\n",
    "target_train = target[:-20]\n",
    "target_test = target[-20:]\n",
    "\n",
    "Create linear regression object\n",
    "regr = linear_model.LinearRegression()\n",
    "\n",
    "Train the model using the training sets\n",
    "regr.fit(features_train, target_train)\n",
    "\n",
    "Make predictions using the testing set\n",
    "features_pred = regr.predict(features_test)\n",
    "\n",
    "# The coefficients\n",
    "#print('Coefficients: \\n', regr.coef_)\n",
    "# The mean squared error\n",
    "#print(\"Mean squared error: %.2f\"\n",
    "#      % mean_squared_error(target_test, features_pred))\n",
    "# Explained variance score: 1 is perfect prediction\n",
    "#print('Variance score: %.2f' % r2_score(target_test, features_pred))\n",
    "\n",
    "# Plot outputs\n",
    "#plt.scatter(features_test, target_test,  color='black')\n",
    "#plt.plot(features_test, feature_pred, color='blue', linewidth=1)\n",
    "\n",
    "#plt.xticks(())\n",
    "#plt.yticks(())\n",
    "\n",
    "#plt.show()\n",
    "\n",
    "### OPTION 2\n",
    "#  make a dataframe from all info needed first\n",
    "# import train_test_split to test the accuracy without manually writing out like in option 1\n",
    "\n",
    "from sklearn import train_test_split\n",
    "\n",
    "#df_x = pd.DataFrame(boston.data, columns=boston.feature_names)\n",
    "#df_y = pd.DataFrame(boston.target)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
